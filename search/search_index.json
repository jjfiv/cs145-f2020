{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"CS145: Introduction to Computing This course is the primary introduction to the Computer Science major or minor at Middlebury College. Course Description In this course we will provide a broad introductory overview of the discipline of computer science, with no prerequisites or assumed prior knowledge of computers or programming. A significant component of the course is an introduction to algorithmic concepts and to programming using Python; programming assignments will explore algorithmic strategies such as selection, iteration, divide-and-conquer, and recursion, as well as introducing the Python programming language. Additional topics will include: the structure and organization of computers, the Internet and World Wide Web, abstraction as a means of managing complexity, social and ethical computing issues, and the question \"What is computation?\" (Juniors and Seniors by waiver) (formerly CSCI 0101) 3 hr. lect./1 hr. lab CSCI 0145 Middlebury Course Catalog Course Modalities Lectures will be delivered asynchronously (with reading quizzes replacing traditional labs). Labs will be run remotely, but synchronously with a focus on supporting the weekly assignments. Waiver Policy Juniors and Seniors are by waiver in this course in order to prioritize those using it as a gateway to the Major. Anyone with interest will be allowed to take the course, limited only by not wanting to overwhelm the course staff (ASIs, TAs, etc.). Syllabus See more detailed information about the course in the online syllabus .","title":"About"},{"location":"index.html#cs145-introduction-to-computing","text":"This course is the primary introduction to the Computer Science major or minor at Middlebury College.","title":"CS145: Introduction to Computing"},{"location":"index.html#course-description","text":"In this course we will provide a broad introductory overview of the discipline of computer science, with no prerequisites or assumed prior knowledge of computers or programming. A significant component of the course is an introduction to algorithmic concepts and to programming using Python; programming assignments will explore algorithmic strategies such as selection, iteration, divide-and-conquer, and recursion, as well as introducing the Python programming language. Additional topics will include: the structure and organization of computers, the Internet and World Wide Web, abstraction as a means of managing complexity, social and ethical computing issues, and the question \"What is computation?\" (Juniors and Seniors by waiver) (formerly CSCI 0101) 3 hr. lect./1 hr. lab CSCI 0145 Middlebury Course Catalog","title":"Course Description"},{"location":"index.html#course-modalities","text":"Lectures will be delivered asynchronously (with reading quizzes replacing traditional labs). Labs will be run remotely, but synchronously with a focus on supporting the weekly assignments.","title":"Course Modalities"},{"location":"index.html#waiver-policy","text":"Juniors and Seniors are by waiver in this course in order to prioritize those using it as a gateway to the Major. Anyone with interest will be allowed to take the course, limited only by not wanting to overwhelm the course staff (ASIs, TAs, etc.).","title":"Waiver Policy"},{"location":"index.html#syllabus","text":"See more detailed information about the course in the online syllabus .","title":"Syllabus"},{"location":"colors_ref.html","text":"Graphics Q&A Named Colors Color Chart initially by Dominique Thiebault, Smith College.","title":"Graphics Q&A"},{"location":"colors_ref.html#graphics-qa","text":"","title":"Graphics Q&amp;A"},{"location":"colors_ref.html#named-colors","text":"Color Chart initially by Dominique Thiebault, Smith College.","title":"Named Colors"},{"location":"files_and_data.html","text":"Files and Data This set of notes is intended to provide some background on what files really are (and how to use them) in Python. Writing to a file (Basic) We can write the numbers 1..100 to a file as follows: # create a variable to hold our open file numbers_out = open('numbers.txt', 'w') # print our data to the file. for i in range(100): print(i+1, file=numbers_out) # remember to close it. numbers_out.close() Notice that open takes two arguments - the name of the file to create, and a string 'w' -- this indicates that we want to write to the new file we're creating. In the next section, we'll use 'r' to read from the file instead. I called the variable holding the file numbers_out ; out to remind me we're writing to it; and numbers because it tells me what's going in there. In examples where you only have one file, sometimes you see shorter names, like just out , or f for file. Make sure you understand why we're using i+1 here. Do we need to call close ? In order to write to files very quickly, your computer is lazy -- it keeps track of the things you've asked it to save, but it doesn't always actually do it until you let them know you're done, by closing the file. Therefore, if you don't f.close() your file f , it might be empty, or partially written. If you've encountered a file that doesn't open before, you might have said this file was corrupted . Writing to a file (Better) Since I always forget to close my files, I only ever open files in a with statement. You should, too! # Replacing: # numbers_out = open('numbers.txt', 'w') # numbers_out.close() with open('numbers.txt', 'w') as numbers_out: for i in range(100): print(i+1, file=numbers_out) The with is a new statement construct, like a function declaration or an if-statement or a for-loop. with closes our files upon exiting the block. with open('numbers.txt', 'w') as numbers_out: for i in range(100): print(i+1, file=numbers_out) # numbers_out still open here. # numbers_out closed here. Just like the variable i is only really useful inside the for-loop, the variable numbers_out that has our file is only useful inside the with statement block. Printing to a file (and string.format) It turns out that the print function has a keyword argument, file that allows us to print to a file instead of to Thonny's console. This is typically how I work with files. We can also use the write function, but it's a little bit harder to work with -- we need to give it a string, (unlike print ) and so I'm introducing format here to convert our numbers to a string, and include a newline ( \"\\n\" ) which print does by default. with open('numbers.txt', 'w') as numbers_out: for i in range(100): numbers_out.write(\"{}\\n\".format(i+1)) We could have also called something like numbers_out.write(str(i+1)+\"\\n\") but format is both more convenient, more flexible, and hopefully -- more readable. Reading from a file Getting information from a file also requires that we first open a file. More importantly, it requires that we know what should be inside the file, and that we write some code to turn it from a string into what we want to use! Read a file to a string Now that we've created our file \"numbers.txt\" , we can open it with Thonny or another text editor, but we can also read it from Python. with open('numbers.txt', 'r') as numbers_in: data = numbers_in.read() print(data) Note that you can call open directly, but here, too, it is most correct to use the with statement. You can also leave off the 'r' argument, because that is the default mode with which we open files. When you run this code, you'll see that the whole file has been read in as a string. We might instead want to turn it into a list of numbers; how we wrote it to the file. String -> list of ints To convert a string with a number on each line to a list of integers, we could do something like this: numbers = [] for line in data.splitlines(): numbers.append(int(line)) print(numbers) Now we have the list of numbers 1,2,3,..100 that we wrote to the file. We still have the big string inside data , which is not a great idea if we ever work with really big data (millions of lines). But, it turns out there's a solution: we read the file a line at a time. Reading one line at a time It turns out that we frequently want to work with each line in a file, one at a time. # skipping the data variable numbers = [] with open('numbers.txt', 'r') as numbers_in: # files in Python act like lists of lines in a for-loop: for line in numbers_in: numbers.append(int(line)) print(numbers) We still end up with the same data in numbers but we collect it one line at a time, when the file numbers_in is still open. Data: It's all just numbers Since we're going to be talking about how computers work very soon, and files can be read as either textual data or as binary data we should take a peek at what is inside a string, so we can understand how these are two views of the same thing! Strings, ASCII and Unicode We're going to take a brief detour to talk about how strings actually work. Strings are actually a sequence of numbers; we can access the number for each letter by using the ord function in Python. >>> data = \"hello 1 2 3\" >>> for ch in data: ... print(ch, ord(ch)) ... h 104 e 101 l 108 l 108 o 111 32 1 49 32 2 50 32 3 51 The opposite of ord is chr : chr(89) gives us the upper-case letter 'Y' . It turns out that computers don't really understand text! They only understand numbers. By convention, we have decided that certain numbers correspond to certain letters: 104 is lowercase H, 32 is a blank space, 49 is the letter 1 , etc. For many years, text data could not be shared well between languages: English-speaking users often used the ASCII table , a mapping for the numbers from 0-127 to most keys on a US keyboard, with punctuation and spaces of various kinds included as well. In some other places, \"extended ASCII\" claimed the numbers from 128-255 and was used to represent additional letters with accents, and that covered a variety of European languages. But it turns out there were many different types of \"extended ASCII\", which meant that documents were not easily shared between different countries of the world, and ASCII couldn't even begin to represent written alphabets like Hanzi which has thousands and thousands of individual characters. Modern computers typically use a version of Unicode which represents most known written languages, including emoji (\ud83d\ude32). Thonny is not great with Emoji and Unicode, but Python has been much better ever since Python 3... Unicode has space for over 2**20 (1,048,576) characters, and even as the Unicode Consortium adds more languages and letters and Emoji, there's still plenty of space! Very few fonts support all these letters, so sometimes you'll see a box character or a question-mark (\u25a1,\ufffd), meaning that that (a) computer understood your emoji or character, but doesn't know how to turn it into graphics, or (b) the computer did not understand your character! When we print strings and data from files, it shows up interpreted as ASCII or Unicode, depending on your operating-system, font, and language settings. But your computer is only moving numbers from place to place! It has no idea that we're sharing paragraphs, sentences, words or letters in the first place. What's a Byte? What's Binary? There's a reason that extended ASCII only used numbers 0-255; and that ASCII targets the numbers 0-127. The reason is that 256 and 128 are powers of two . It turns out that computers are built around the idea of on/off switches; with only on/off ( True or False ) to select from, we can only express the number 1 or the number 0 . But here's a trick -- by combining multiple of these 0 / 1 switches, we can represent larger numbers on our computer. Think about writing numbers with arabic numerals: we only have 10 such numbers: 0,1,2,3,4,5,6,7,8,9 , but we can represent many more numbers than just 10 by combining them. The way you've learned to read and write numbers in arabic numerals is a base-10 or decimal number system. There are 10 symbols, and so when we need to represent numbers larger than that, we must use more places. 1000s 100s 10s 1s 10**3 10**2 10**1 10**0 0 4 5 7 The number 457 represents 4 in the hundreds-place, 5 in the tens-place, and 1 in the ones-place: 4 * 100 + 5 * 10 + 7 * 1 Binary numbers (or base-2 numbers) are exactly the same concept. To represent that same number; 457, we must use a lot more places, since the only two symbols we have are 0 and 1 -- each place is worth less. 457 in binary is written as: 111001001 We still have a 1s place, but we also have a 2s place, a 4s place and so forth, growing by 2 every step, rather than grow by 10. To understand this binary number, let's write out the places for each digit: 256 128 64 32 16 8 4 2 1 2**8 2**7 2**6 2**5 2**4 2**3 2**2 2**1 2**0 1 1 1 0 0 1 0 0 1 So this number is: 256 + 128 + 64 + 8 + 1 . Using these 9 switches, we can represent other numbers... any number from 0 to 511, in fact. Each of these switches is called a bit . Computers don't operate at the bit-level; it's just too complicated and not very efficient: we always want somewhat bigger numbers than that! You probably have used only 32-bit or 64-bit computers -- the bit numbers here correspond to the largest size the computer is comfortable using (More on that soon!). However, the largest numbers a computer is comfortable with don't matter as much as the smallest numbers. The smallest unit most computers operate over is a byte , which is a grouping of 8 bits. Since a byte has 8 bits, it can represent 2**8 possibilities, the numbers from 0-255, or with a trick (we'll discuss two's complement next week), numbers from -128..127. Because bytes are the smallest unit on a computer, this is why ASCII was designed to fit comfortably in a byte. Unicode ( 2**20 ) has more than 1-byte ( 2**8 ) worth of data, but less than 4 bytes ( 2**32 ), so there's actually 3 common ways to write it down: UTF-8, UTF-16, and UTF-32 (the number corresponds to the number of bits read at a time!). UTF-8 overlaps quite nicely with ASCII, and it is the default format in many new applications. bytes and Binary Files When we talk about how everything is composed of bytes, and think about files as being composed of a sequence of bytes (that happen to be english text), we need another way to interact with files. That way is to open them as \"binary\" numbers, and to use the write method. First, let's prepare our numbers! # Note that all these numbers are < 256; so they each fit in a byte! data_nums = [84, 104, 105, 115, 32, 105, 115, 32, 109, 121, 32, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 33, 10] Let's write that data to a file! with open('message.secret', 'wb') as out: out.write(bytes(data_nums)) Since I specifically picked out ASCII data to write to our file, even though we've written a sequence of numbers, we can open and read it as if it were text: with open('message.secret') as msg: print(msg.read()) What is the secret message? Run the pieces you need for this now. Plain Text Files Plain-text files , like this 'message.secret' , our Python code, and the files we've created so far are intelligible by a lot of different programs. If you're on MacOS, you can open these files you've created with TextEdit, and if you're on Windows, you can open these files with NotePad. Note, you will probably have to convince your computer to try by right-clicking and choosing Open With... . Other kinds of files, like Word Documents, images, audio files, ZIP files, and anything else you might have seen are not likely to actually be \"Plain-text\" files. If you open them to print out with Python, you'll be in for a whole bunch of \"nonsense\" text. What are File Extensions? We gave our file the extension \".secret\" which may confuse them, but file names and extensions are just like labels! You can't make a Python file into a JPEG image by renaming hw1.py to hw1.jpeg , but you can confuse Windows/MacOS about which program it should open it with! Think of file names as labels! You can write \"banana\" on a sticky note and put it on an apple as many times as you want, it won't turn yellow! Plain-Text Images: SVG There's an image format called SVG (Scalable Vector Graphics) we can use to draw to a file. It is a lot like HTML, where special sequences are called \"tags\" and are marked with angle-brackets. For example; the following snippet would instruct the program reading the file to draw a green rectangle at (11,22) with of size (33,44). <rect x=\"11\" y=\"22\" width=\"33\" height=\"44\" color=\"green\"> An example that shows off many basic shapes is to the left; this comes from a tutorial from Mozilla . Writing these files by hand can become tedious, but we can use Python to quickly \"generate\" a lot of shapes, and save it to an SVG file. Inkscape is an example of drawing software that lets you compose SVG images visually. For example, we can recreate our chessboard: Which will have the rather repetitive body of: <?xml version=\"1.0\" standalone=\"no\"?> <svg width=\"256\" height=\"256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"> <rect x=\"0\" y=\"0\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> <rect x=\"0\" y=\"32\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"red\" /> <rect x=\"0\" y=\"64\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> <rect x=\"0\" y=\"96\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"red\" /> <rect x=\"0\" y=\"128\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> <!-- ... xml comment here to mention skipped lines ... --> <rect x=\"224\" y=\"224\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> </svg> To save time, we could write a Python program to generate all these rectangle tags and save the output to a file with the extension \".svg\" then we can view it in a compatible program. To make your life easier, I suggest using single-quoted strings (since attributes are quoted in the SVG file we're trying to create), and I also recommend the format function again; here we will really demonstrate its usefulness; having a lot of \"{}\" get substituted for us is quite convenient. size = 32 with open('chessboard.svg', 'w') as out: print('<?xml version=\"1.0\" standalone=\"no\"?>', file=out) drawing = '<svg width=\"{}\" height=\"{}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">'.format(size*8, size*8) print(drawing, file=out) for x in range(8): for y in range(8): color = \"red\" if (x + y) % 2 == 0: color = \"black\" rect = '<rect x=\"{}\" y=\"{}\" width=\"{}\" height=\"{}\" stroke=\"grey\" fill=\"{}\" />'.format(x * size, y * size, size, size, color) print(rect, file=out) print(\"</svg>\", file=out) Running this code produces a file, \"chessboard.svg\" which can then be opened by another program on your computer (Chrome or Firefox should understand it, at least!) Abstraction If we want to make our lives easier, we can separate the parts that put together the SVG XML from the parts that draw the chessboard: def svg_start(svg, width, height): print('<?xml version=\"1.0\" standalone=\"no\"?>', file=out) print('<svg width=\"{}\" height=\"{}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">'.format(width, height), file=svg) def svg_end(svg): print('</svg>', file=svg) def svg_rect(svg, x, y, width, height, color): print('<rect x=\"{}\" y=\"{}\" width=\"{}\" height=\"{}\" stroke=\"grey\" fill=\"{}\" />'.format(x, y, width, height, color), file=svg) size = 32 with open('chessboard.svg', 'w') as out: svg_start(out, size*8, size*8) for x in range(8): for y in range(8): color = \"red\" if (x + y) % 2 == 0: color = \"black\" svg_rect(out, x*size, y*size, size, size, color) svg_end(out) Additional File Formats Additional file formats require special software to read and write -- SVG, PNG, JPEG, TIFF, GIF are all different ways of saving graphical data to a file, but aside from SVG, the others store a 2d grid of pixel data, and they do so in a custom binary format. Writing code to save them or read them is outside the scope of this class. We will, however, install some Python packages that will allow us to explore images and music. Installing Packages In Thonny, go to the Tools menu, and choose Manage Packages. This will open the Manage Packages Window: In the bar at the top, type the package name, for this example we will install pillow . Then click Find package from PyPI . Then click the \"Install Button\". (Mine says \"Upgrade\" below) When it's done, click \"Close\". Assuming the install went well, the following program will now run: from PIL import Image size = 32 img = Image.new('RGB', (size*8, size*8)) for tx in range(8): for ty in range(8): color = (255,0,0) if (tx + ty) % 2 == 0: color = (0,0,0) # fill in each square: for dx in range(32): for dy in range(32): img.putpixel((tx*size + dx, ty*size + dy), color) img.show() # appears immediately Perhaps you can guess what it should look like? Now you can swap img.show() with the following code, to corroborate my claim that all files are just made out of numbers. img.save('mystery.png') with open('mystery.png', 'rb') as fp: raw_data = fp.read() print(\"mystery.png is {} bytes long!\".format(len(raw_data))) for x in raw_data[:16]: print(x) Actually, the first 4 bytes of a \"binary\" file are usually rather special. Try this: print(raw_data[:4])","title":"Files and Data"},{"location":"files_and_data.html#files-and-data","text":"This set of notes is intended to provide some background on what files really are (and how to use them) in Python.","title":"Files and Data"},{"location":"files_and_data.html#writing-to-a-file-basic","text":"We can write the numbers 1..100 to a file as follows: # create a variable to hold our open file numbers_out = open('numbers.txt', 'w') # print our data to the file. for i in range(100): print(i+1, file=numbers_out) # remember to close it. numbers_out.close() Notice that open takes two arguments - the name of the file to create, and a string 'w' -- this indicates that we want to write to the new file we're creating. In the next section, we'll use 'r' to read from the file instead. I called the variable holding the file numbers_out ; out to remind me we're writing to it; and numbers because it tells me what's going in there. In examples where you only have one file, sometimes you see shorter names, like just out , or f for file. Make sure you understand why we're using i+1 here.","title":"Writing to a file (Basic)"},{"location":"files_and_data.html#do-we-need-to-call-close","text":"In order to write to files very quickly, your computer is lazy -- it keeps track of the things you've asked it to save, but it doesn't always actually do it until you let them know you're done, by closing the file. Therefore, if you don't f.close() your file f , it might be empty, or partially written. If you've encountered a file that doesn't open before, you might have said this file was corrupted .","title":"Do we need to call close?"},{"location":"files_and_data.html#writing-to-a-file-better","text":"Since I always forget to close my files, I only ever open files in a with statement. You should, too! # Replacing: # numbers_out = open('numbers.txt', 'w') # numbers_out.close() with open('numbers.txt', 'w') as numbers_out: for i in range(100): print(i+1, file=numbers_out) The with is a new statement construct, like a function declaration or an if-statement or a for-loop. with closes our files upon exiting the block. with open('numbers.txt', 'w') as numbers_out: for i in range(100): print(i+1, file=numbers_out) # numbers_out still open here. # numbers_out closed here. Just like the variable i is only really useful inside the for-loop, the variable numbers_out that has our file is only useful inside the with statement block.","title":"Writing to a file (Better)"},{"location":"files_and_data.html#printing-to-a-file-and-stringformat","text":"It turns out that the print function has a keyword argument, file that allows us to print to a file instead of to Thonny's console. This is typically how I work with files. We can also use the write function, but it's a little bit harder to work with -- we need to give it a string, (unlike print ) and so I'm introducing format here to convert our numbers to a string, and include a newline ( \"\\n\" ) which print does by default. with open('numbers.txt', 'w') as numbers_out: for i in range(100): numbers_out.write(\"{}\\n\".format(i+1)) We could have also called something like numbers_out.write(str(i+1)+\"\\n\") but format is both more convenient, more flexible, and hopefully -- more readable.","title":"Printing to a file (and string.format)"},{"location":"files_and_data.html#reading-from-a-file","text":"Getting information from a file also requires that we first open a file. More importantly, it requires that we know what should be inside the file, and that we write some code to turn it from a string into what we want to use!","title":"Reading from a file"},{"location":"files_and_data.html#read-a-file-to-a-string","text":"Now that we've created our file \"numbers.txt\" , we can open it with Thonny or another text editor, but we can also read it from Python. with open('numbers.txt', 'r') as numbers_in: data = numbers_in.read() print(data) Note that you can call open directly, but here, too, it is most correct to use the with statement. You can also leave off the 'r' argument, because that is the default mode with which we open files. When you run this code, you'll see that the whole file has been read in as a string. We might instead want to turn it into a list of numbers; how we wrote it to the file.","title":"Read a file to a string"},{"location":"files_and_data.html#string-list-of-ints","text":"To convert a string with a number on each line to a list of integers, we could do something like this: numbers = [] for line in data.splitlines(): numbers.append(int(line)) print(numbers) Now we have the list of numbers 1,2,3,..100 that we wrote to the file. We still have the big string inside data , which is not a great idea if we ever work with really big data (millions of lines). But, it turns out there's a solution: we read the file a line at a time.","title":"String -&gt; list of ints"},{"location":"files_and_data.html#reading-one-line-at-a-time","text":"It turns out that we frequently want to work with each line in a file, one at a time. # skipping the data variable numbers = [] with open('numbers.txt', 'r') as numbers_in: # files in Python act like lists of lines in a for-loop: for line in numbers_in: numbers.append(int(line)) print(numbers) We still end up with the same data in numbers but we collect it one line at a time, when the file numbers_in is still open.","title":"Reading one line at a time"},{"location":"files_and_data.html#data-its-all-just-numbers","text":"Since we're going to be talking about how computers work very soon, and files can be read as either textual data or as binary data we should take a peek at what is inside a string, so we can understand how these are two views of the same thing!","title":"Data: It's all just numbers"},{"location":"files_and_data.html#strings-ascii-and-unicode","text":"We're going to take a brief detour to talk about how strings actually work. Strings are actually a sequence of numbers; we can access the number for each letter by using the ord function in Python. >>> data = \"hello 1 2 3\" >>> for ch in data: ... print(ch, ord(ch)) ... h 104 e 101 l 108 l 108 o 111 32 1 49 32 2 50 32 3 51 The opposite of ord is chr : chr(89) gives us the upper-case letter 'Y' . It turns out that computers don't really understand text! They only understand numbers. By convention, we have decided that certain numbers correspond to certain letters: 104 is lowercase H, 32 is a blank space, 49 is the letter 1 , etc. For many years, text data could not be shared well between languages: English-speaking users often used the ASCII table , a mapping for the numbers from 0-127 to most keys on a US keyboard, with punctuation and spaces of various kinds included as well. In some other places, \"extended ASCII\" claimed the numbers from 128-255 and was used to represent additional letters with accents, and that covered a variety of European languages. But it turns out there were many different types of \"extended ASCII\", which meant that documents were not easily shared between different countries of the world, and ASCII couldn't even begin to represent written alphabets like Hanzi which has thousands and thousands of individual characters. Modern computers typically use a version of Unicode which represents most known written languages, including emoji (\ud83d\ude32). Thonny is not great with Emoji and Unicode, but Python has been much better ever since Python 3... Unicode has space for over 2**20 (1,048,576) characters, and even as the Unicode Consortium adds more languages and letters and Emoji, there's still plenty of space! Very few fonts support all these letters, so sometimes you'll see a box character or a question-mark (\u25a1,\ufffd), meaning that that (a) computer understood your emoji or character, but doesn't know how to turn it into graphics, or (b) the computer did not understand your character! When we print strings and data from files, it shows up interpreted as ASCII or Unicode, depending on your operating-system, font, and language settings. But your computer is only moving numbers from place to place! It has no idea that we're sharing paragraphs, sentences, words or letters in the first place.","title":"Strings, ASCII and Unicode"},{"location":"files_and_data.html#whats-a-byte-whats-binary","text":"There's a reason that extended ASCII only used numbers 0-255; and that ASCII targets the numbers 0-127. The reason is that 256 and 128 are powers of two . It turns out that computers are built around the idea of on/off switches; with only on/off ( True or False ) to select from, we can only express the number 1 or the number 0 . But here's a trick -- by combining multiple of these 0 / 1 switches, we can represent larger numbers on our computer. Think about writing numbers with arabic numerals: we only have 10 such numbers: 0,1,2,3,4,5,6,7,8,9 , but we can represent many more numbers than just 10 by combining them. The way you've learned to read and write numbers in arabic numerals is a base-10 or decimal number system. There are 10 symbols, and so when we need to represent numbers larger than that, we must use more places. 1000s 100s 10s 1s 10**3 10**2 10**1 10**0 0 4 5 7 The number 457 represents 4 in the hundreds-place, 5 in the tens-place, and 1 in the ones-place: 4 * 100 + 5 * 10 + 7 * 1 Binary numbers (or base-2 numbers) are exactly the same concept. To represent that same number; 457, we must use a lot more places, since the only two symbols we have are 0 and 1 -- each place is worth less. 457 in binary is written as: 111001001 We still have a 1s place, but we also have a 2s place, a 4s place and so forth, growing by 2 every step, rather than grow by 10. To understand this binary number, let's write out the places for each digit: 256 128 64 32 16 8 4 2 1 2**8 2**7 2**6 2**5 2**4 2**3 2**2 2**1 2**0 1 1 1 0 0 1 0 0 1 So this number is: 256 + 128 + 64 + 8 + 1 . Using these 9 switches, we can represent other numbers... any number from 0 to 511, in fact. Each of these switches is called a bit . Computers don't operate at the bit-level; it's just too complicated and not very efficient: we always want somewhat bigger numbers than that! You probably have used only 32-bit or 64-bit computers -- the bit numbers here correspond to the largest size the computer is comfortable using (More on that soon!). However, the largest numbers a computer is comfortable with don't matter as much as the smallest numbers. The smallest unit most computers operate over is a byte , which is a grouping of 8 bits. Since a byte has 8 bits, it can represent 2**8 possibilities, the numbers from 0-255, or with a trick (we'll discuss two's complement next week), numbers from -128..127. Because bytes are the smallest unit on a computer, this is why ASCII was designed to fit comfortably in a byte. Unicode ( 2**20 ) has more than 1-byte ( 2**8 ) worth of data, but less than 4 bytes ( 2**32 ), so there's actually 3 common ways to write it down: UTF-8, UTF-16, and UTF-32 (the number corresponds to the number of bits read at a time!). UTF-8 overlaps quite nicely with ASCII, and it is the default format in many new applications.","title":"What's a Byte? What's Binary?"},{"location":"files_and_data.html#bytes-and-binary-files","text":"When we talk about how everything is composed of bytes, and think about files as being composed of a sequence of bytes (that happen to be english text), we need another way to interact with files. That way is to open them as \"binary\" numbers, and to use the write method. First, let's prepare our numbers! # Note that all these numbers are < 256; so they each fit in a byte! data_nums = [84, 104, 105, 115, 32, 105, 115, 32, 109, 121, 32, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 33, 10] Let's write that data to a file! with open('message.secret', 'wb') as out: out.write(bytes(data_nums)) Since I specifically picked out ASCII data to write to our file, even though we've written a sequence of numbers, we can open and read it as if it were text: with open('message.secret') as msg: print(msg.read()) What is the secret message? Run the pieces you need for this now.","title":"bytes and Binary Files"},{"location":"files_and_data.html#plain-text-files","text":"Plain-text files , like this 'message.secret' , our Python code, and the files we've created so far are intelligible by a lot of different programs. If you're on MacOS, you can open these files you've created with TextEdit, and if you're on Windows, you can open these files with NotePad. Note, you will probably have to convince your computer to try by right-clicking and choosing Open With... . Other kinds of files, like Word Documents, images, audio files, ZIP files, and anything else you might have seen are not likely to actually be \"Plain-text\" files. If you open them to print out with Python, you'll be in for a whole bunch of \"nonsense\" text.","title":"Plain Text Files"},{"location":"files_and_data.html#what-are-file-extensions","text":"We gave our file the extension \".secret\" which may confuse them, but file names and extensions are just like labels! You can't make a Python file into a JPEG image by renaming hw1.py to hw1.jpeg , but you can confuse Windows/MacOS about which program it should open it with! Think of file names as labels! You can write \"banana\" on a sticky note and put it on an apple as many times as you want, it won't turn yellow!","title":"What are File Extensions?"},{"location":"files_and_data.html#plain-text-images-svg","text":"There's an image format called SVG (Scalable Vector Graphics) we can use to draw to a file. It is a lot like HTML, where special sequences are called \"tags\" and are marked with angle-brackets. For example; the following snippet would instruct the program reading the file to draw a green rectangle at (11,22) with of size (33,44). <rect x=\"11\" y=\"22\" width=\"33\" height=\"44\" color=\"green\"> An example that shows off many basic shapes is to the left; this comes from a tutorial from Mozilla . Writing these files by hand can become tedious, but we can use Python to quickly \"generate\" a lot of shapes, and save it to an SVG file. Inkscape is an example of drawing software that lets you compose SVG images visually. For example, we can recreate our chessboard: Which will have the rather repetitive body of: <?xml version=\"1.0\" standalone=\"no\"?> <svg width=\"256\" height=\"256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"> <rect x=\"0\" y=\"0\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> <rect x=\"0\" y=\"32\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"red\" /> <rect x=\"0\" y=\"64\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> <rect x=\"0\" y=\"96\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"red\" /> <rect x=\"0\" y=\"128\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> <!-- ... xml comment here to mention skipped lines ... --> <rect x=\"224\" y=\"224\" width=\"32\" height=\"32\" stroke=\"grey\" fill=\"black\" /> </svg> To save time, we could write a Python program to generate all these rectangle tags and save the output to a file with the extension \".svg\" then we can view it in a compatible program. To make your life easier, I suggest using single-quoted strings (since attributes are quoted in the SVG file we're trying to create), and I also recommend the format function again; here we will really demonstrate its usefulness; having a lot of \"{}\" get substituted for us is quite convenient. size = 32 with open('chessboard.svg', 'w') as out: print('<?xml version=\"1.0\" standalone=\"no\"?>', file=out) drawing = '<svg width=\"{}\" height=\"{}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">'.format(size*8, size*8) print(drawing, file=out) for x in range(8): for y in range(8): color = \"red\" if (x + y) % 2 == 0: color = \"black\" rect = '<rect x=\"{}\" y=\"{}\" width=\"{}\" height=\"{}\" stroke=\"grey\" fill=\"{}\" />'.format(x * size, y * size, size, size, color) print(rect, file=out) print(\"</svg>\", file=out) Running this code produces a file, \"chessboard.svg\" which can then be opened by another program on your computer (Chrome or Firefox should understand it, at least!)","title":"Plain-Text Images: SVG"},{"location":"files_and_data.html#abstraction","text":"If we want to make our lives easier, we can separate the parts that put together the SVG XML from the parts that draw the chessboard: def svg_start(svg, width, height): print('<?xml version=\"1.0\" standalone=\"no\"?>', file=out) print('<svg width=\"{}\" height=\"{}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">'.format(width, height), file=svg) def svg_end(svg): print('</svg>', file=svg) def svg_rect(svg, x, y, width, height, color): print('<rect x=\"{}\" y=\"{}\" width=\"{}\" height=\"{}\" stroke=\"grey\" fill=\"{}\" />'.format(x, y, width, height, color), file=svg) size = 32 with open('chessboard.svg', 'w') as out: svg_start(out, size*8, size*8) for x in range(8): for y in range(8): color = \"red\" if (x + y) % 2 == 0: color = \"black\" svg_rect(out, x*size, y*size, size, size, color) svg_end(out)","title":"Abstraction"},{"location":"files_and_data.html#additional-file-formats","text":"Additional file formats require special software to read and write -- SVG, PNG, JPEG, TIFF, GIF are all different ways of saving graphical data to a file, but aside from SVG, the others store a 2d grid of pixel data, and they do so in a custom binary format. Writing code to save them or read them is outside the scope of this class. We will, however, install some Python packages that will allow us to explore images and music.","title":"Additional File Formats"},{"location":"files_and_data.html#installing-packages","text":"In Thonny, go to the Tools menu, and choose Manage Packages. This will open the Manage Packages Window: In the bar at the top, type the package name, for this example we will install pillow . Then click Find package from PyPI . Then click the \"Install Button\". (Mine says \"Upgrade\" below) When it's done, click \"Close\". Assuming the install went well, the following program will now run: from PIL import Image size = 32 img = Image.new('RGB', (size*8, size*8)) for tx in range(8): for ty in range(8): color = (255,0,0) if (tx + ty) % 2 == 0: color = (0,0,0) # fill in each square: for dx in range(32): for dy in range(32): img.putpixel((tx*size + dx, ty*size + dy), color) img.show() # appears immediately Perhaps you can guess what it should look like? Now you can swap img.show() with the following code, to corroborate my claim that all files are just made out of numbers. img.save('mystery.png') with open('mystery.png', 'rb') as fp: raw_data = fp.read() print(\"mystery.png is {} bytes long!\".format(len(raw_data))) for x in raw_data[:16]: print(x) Actually, the first 4 bytes of a \"binary\" file are usually rather special. Try this: print(raw_data[:4])","title":"Installing Packages"},{"location":"midterm_review.html","text":"Midterm Information The Midterm will be on Canvas; and it will be 60-70% multiple choice, like our homeworks, and will be available self-scheduled over the weekend. Midterm Concepts int vs. float operators: + , - , * , ** , / , // , % semantic errors syntax errors runtime errors script vs. shell variable assignment comments reassignment functions print ing parameters arguments local variables declaration order - functions reassignment order - variables functions that take functions as parameters \"fruitful functions\" return function composition if / else elif (chained conditionals) and / or / not recursion base case recursive step RecursionError input function basic turtle s random.randint , random.choice(list) while loops incrementing variables isinstance break X in Y for n in range(...) for letter in string for item in list for key in dictionary indexing slicing list.append len(list) , len(string) , len(dict) empty strings for index,item in enumerate(list) aliasing for lists dictionary[key] insert dictionary[key] lookup/crash dictionary.get(key, backup)","title":"Midterm Information"},{"location":"midterm_review.html#midterm-information","text":"The Midterm will be on Canvas; and it will be 60-70% multiple choice, like our homeworks, and will be available self-scheduled over the weekend.","title":"Midterm Information"},{"location":"midterm_review.html#midterm-concepts","text":"int vs. float operators: + , - , * , ** , / , // , % semantic errors syntax errors runtime errors script vs. shell variable assignment comments reassignment functions print ing parameters arguments local variables declaration order - functions reassignment order - variables functions that take functions as parameters \"fruitful functions\" return function composition if / else elif (chained conditionals) and / or / not recursion base case recursive step RecursionError input function basic turtle s random.randint , random.choice(list) while loops incrementing variables isinstance break X in Y for n in range(...) for letter in string for item in list for key in dictionary indexing slicing list.append len(list) , len(string) , len(dict) empty strings for index,item in enumerate(list) aliasing for lists dictionary[key] insert dictionary[key] lookup/crash dictionary.get(key, backup)","title":"Midterm Concepts"},{"location":"syllabus.html","text":"Syllabus An online, always up-to-date version of this syllabus can be found online . Instructor: Prof. John Foley ( johnf@middlebury.edu ) Course Website: go/cs145 Slack Workspace midd-cs145-fall2020.slack.com Lectures: 100% asynchronous and remote Discussions / Lab Sections W - Thursday - 10-10:50am X - Thursday - 2-2:50pm Y - Thursday - 3:15-4:05pm Z - Friday - 10:20-11:10am Office Hours Office Hours or \"Student Hours\" are times when I am available for you to discuss aspects of the course, Computer Science, Middlebury, your plans, your questions about college in general, or really anything else I might be able to help with. Always by appointment: Schedule a 15, 20 or 30-minute meeting with me . Calendly is a service that lets you drop a meeting on my calendar whenever I'm free. I will guarantee I can make anything with 24 hours notice, but I will try my best with anything sooner. Message me in Slack and we can find a time to chat if those normal business hours don't work for you. Course Description In this course we will provide a broad introductory overview of the discipline of computer science, with no prerequisites or assumed prior knowledge of computers or programming. A significant component of the course is an introduction to algorithmic concepts and to programming using Python; programming assignments will explore algorithmic strategies such as selection, iteration, divide-and-conquer, and recursion, as well as introducing the Python programming language. Additional topics will include: the structure and organization of computers, the Internet and World Wide Web, abstraction as a means of managing complexity, social and ethical computing issues, and the question \"What is computation?\" (Juniors and Seniors by waiver) (formerly CSCI 0101) 3 hr. lect./1 hr. lab CSCI 0145 Middlebury Course Catalog Course Modalities Lectures will be delivered asynchronously (with homework or \"reading quizzes\" replacing traditional labs). Labs will be run remotely, but synchronously with a focus on discussing the homework and supporting the weekly programming assignments (\"projects\"). Waiver Policy Juniors and Seniors are by waiver in this course in order to prioritize those using it as a gateway to the Major. Anyone with interest will be allowed to take the course, limited only by not wanting to overwhelm the course staff (ASIs, TAs, etc.). TA/Tutoring Sessions Information about the tutors can be found at go/cstutors . Temporary : There is usually tutoring every day from Sunday-Thursday, i.e., every night except Fridays and Saturdays. Tutors are your near-peers: Middlebury students who have completed this course in the past and are available for you to talk through ideas, problems, and technology. Course Topics This is an introductory computer science class and no prior experience is expected or required . It is one of a few different entry points (CS105, CS150) into the CS major. We will do a lot of programming, and you will learn and practice a fair amount of Python, but this is an introduction to computer science, not a \"Python\" class. There is a lot of Python that we will not cover. Topics that we will cover include: Abstraction, algorithms, and program design Basic Python programming: variables, conditionals, loops, functions, and classes Fundamental programming paradigms: functional, imperative, object-oriented Data representation and storage Computer architecture Program complexity Course Content The primary mode of content delivery will be through readings and the homework, which is designed to highlight and encourage discussion over particular aspects of the readings. Textbook: Think Python (2e) We will be reading primarily from the free \"Think Python\" Textbook which is available both as an Online Web Page and as a downloadable PDF . I have a paper copy, but you do not need to purchase a copy unless you prefer to read a physical book. Inclusivity in Think Python While the content and ordering of this textbook are both great, the examples leave much to be desired -- nearly every single example is drawn from the comedy routines of the British surrealist comedians \" Monty Python \" ... To someone who's never seen any of their material (like me, the instructor!) that means their examples are often filled with gibberish that I don't find particularly helpful or funny. Online Resources There are probably hundreds of introductory Computer Science and Python courses available online (free or paid) and so at various points we have the opportunity to supplement our knowledge with online resources. If I find resources I find particularly helpful, I will be sharing them on Slack. Please do the same, if you find resources that answer your own questions. Course-Videos Given the textbook and a variety of online materials that are available, the primary content I will be creating for this course will videos demonstrating hands-on use of our software \"Thonny\" as well as material to summarize and guide discussion, like our homework \"quizzes\". Course Equipment & Software Since this course will be run virtually we will need to use software in addition to the course-specific software we would ordinarily setup and use. Computer / Laptop Access If you have any questions about computer access, please don't hesitate to contact me ASAP - johnf@middlebury.edu - there are options through both the College and Department. Some more details are below, but I'm happy to help you navigate these systems. If you ever find yourself temporarily in need of a laptop, the Computer Science department has 10 rotating Dell laptops available to our students. These come pre-installed with software for most of the courses in the major. They are available to be loaned out short-term or long-term. Please get in touch ahead of time if you think you might need one. Due to COVID-19, short-term loans may be trickier than usual. On Long-Term Use: College policy has changed recently to include the expectation for every student to have a laptop available. The college provides laptops to those who need them where \u201cneed\u201d is based on Student Financial Services calculations. If you anticipate needing a laptop for the whole term, we encourage you to inquire with Student Financial Services and the library first due to our smaller pool of equipment. However, our department commits to meeting the needs of every student, so do not be afraid to reach out if you believe you need one of our laptops for any length of time. From Robert Lichenstein (rlichenstein@), lightly edited. Zoom (emphasizing synchronous audio) Our synchronous lab times will be conducted over Zoom, where we will occasionally use breakout rooms or share screens but we will focus on getting started with and having real-time discussions about the new projects each week. It is likely Zoom will be required for many of your other courses. Look for the Zoom link for your lab in your lab-channel on Slack! Slack Slack is an online, real-time chat service used by a lot of businesses and other organizations. We will be using our free slack workspace to: Provide a space for asking questions that is less formal than email and doesn't require a good Zoom connection. Provide a long-lasting chat space, since Zoom chat disappears at the end of a call. Provide the opportunity for students to have one-on-one or small group conversations given the course exists in virtual space this Fall. I will be manually inviting students who are enrolled in the course to the Slack workspace in September. Python via Thonny We will install Thonny - a program to help us learn to write Python in the first week and use it throughout the course. There are installers for Mac, Windows, & Linux. If you have any trouble getting this installed, reach out in Slack or in Tutoring hours. Online Python Access If you have a Chromebook or cannot install Thonny (please consult with the instructor if this is the case), you will also be able to access Python through a website like repl.it . This kind of access to Python will be far less convenient than having it on your personal computer but may be the best choice. Logisim Later in the course, we will explore how computers are constructed out of electrical logic gates and transistors. Logisim is software that will allow us to \"build circuits\" on our computers and test them. We will learn to install & use this software together, later in the course. Course Structure CS145 has no officially scheduled lecture session, but you will have been enrolled in a lab section: W, X, Y, or Z. You are expected to attend our synchronous \"lab\" times each week. We will cover a lot of material asynchronously through the week (expect materials to be posted by Monday morning). Weekly Project Dates In order to simplify our management of the course, the goal is for us to have consistent days each week to expect new material and projects. Mondays: Readings & Homework Video Content & Weekly Homework \"Quiz\" will be made available so you can begin reading, discussing, and trying examples whenever you start every Monday. Wednesdays: Projects Due & Available The project for the week will be released by Wednesday -- if you feel comfortable with the readings for the week you may begin early. The project for the previous week will be due Wednesday at Midnight. Thursdays/Fridays: Lab Session Lab sessions are scheduled on Thursdays & Fridays. It is important that you come to the beginning of the lab section even if you feel you have managed to complete the weekly project and readings independently. Deadline Conflicts While projects are formally due every Wednesday, if you have recurring family or work responsibilities on Wednesdays, please let the instructor know as soon as possible, and we can work out a more feasible deadline for your situation. The value in a schedule is not usually the exact hard deadlines but rather in ensuring that our learning proceeds together, at a reasonable pace. The other importance of deadlines is ensuring that the graders and myself can get you timely and helpful feedback! Grading Information The following grading structure is meant to emphasize the importance of weekly readings, homework, and projects while also including the midterm and final exams. Midterm and Final exams will likely include questions and ideas drawn directly from the homework and projects. Section Weighting Readings & Homework 20% Projects 40% Midterm 20% Final 20% Because homework may be perfected and resubmitted through our lab sections, it may be fair to characterize \"Readings & Homeworks\" as discussion or participation. Academic Honesty at Middlebury As an academic community devoted to the life of the mind, Middlebury requires of every student complete intellectual honesty in the preparation and submission of all academic work. Details of our Academic Honesty, Honor Code, and Related Disciplinary Policies are available in Middlebury\u2019s handbook. Middlebury College Syllabus Template retrieved 18 August 2020. Academic Honesty & CS Work in computer science may often feel like a strange mix of art, language, mathematics, and logic. What sets this course apart from some of these other domains is the ability to instantaneously consult a \"gold standard\" for most of your work. Does your python program work? A lot of the time, you can run it immediately, and find out. When we go to assess homework and projects, often we can only tell whether or not it works -- we can't tell if you understand it. Do you understand your work? Especially in introductory CS courses, where the solutions are usually not that long, you can often land on a solution by making a small change, and not fully understand why it works now and it didn't before. You must take charge of your personal learning. Do not settle for \"it works\" if you do not understand why -- ask a question! When you get the opportunity to discuss your work with other students, ensure that everyone leaves the group discussion with the same level of understanding. A working solution you do not understand has no value to your learning. Because the solutions to our projects (in this course) are short, and there are limited intro-style problems to choose from, it is likely you will be able to find partial or full solutions to problems using online resources such as google or stack-overflow. A working solution you do not understand has no value to your learning. Universal Access & Accommodations The Disability Resource Center (DRC) at Middlebury provides for student accommodation in courses. The DRC provides support for students with disabilities and facilitates the accommodations process by helping students understand the resources and options available and by helping faculty understand how to increase access and full participation in courses. The DRC can also provide referrals for students who would like to undergo diagnostic testing. Students who are on financial aid and have never undergone diagnostic testing can apply to the CTLR for support to cover the cost of off-campus testing. DRC services are free to all students. If you have any accommodations through this office, please notify the instructor as soon as possible at the start of the semester so that your accommodation can be supported as quickly as possible. I try to create course materials with \"Universal Design\" in mind: that is, I try to make it so that all materials can be accomplished fairly by all students: for example, I schedule double the expected time by default on all exams. If there is any change that can be made to the course materials that would improve your learning, don't hesitate to ask or suggest such changes. Student Expectations / Learning Strategy I will often be comparing this course to a foreign language course. Learning about computers via a computer language like Python is quite similar to learning a second or third language; if you do not read, write, and speak the language, it will be difficult to make sense of concepts or to get the ideas to stick in your head. To guide and demonstrate good learning practice, each of our readings will be accompanied by a handful of (mostly) multiple choice questions. These questions will be more difficult than those designed for exams, because the goal of them is to drive experimentation and discussion, rather than to check knowledge. I will freely discuss the correct answers to these questions in our synchronous labs, after which you will have the opportunity to update your answers. I imagine that a successful strategy to learn from the homework & readings will be to: Read the chapters and take some notes. Attempt the \"homework quizzes\". Try to assess your knowledge/notes: keep the book \"closed\". Guess on questions that ask \"What does this code do?\" Use your experience of homework to guide your learning: Re-read any sections on which you do not feel you know the correct answers. Type in and run any code from the homework to verify whether your guesses are correct. Review the homework again, updating your answers based on your closer reading. Ask questions and share knowledge on Slack. I will be fairly quiet here (focusing on clarifications, and giving thumbs-up to good discussions). Ask questions synchronously in lab. \"Perfect\" your homework answers & notes after lab. When projects become available on Wednesdays, you'll want to be wrapping up your knowledge from the readings so that you will be ready to work on the new assignment in the second half of lab. Inclusivity & Discussions It is important to me to create an inclusive learning environment where diversity and individual differences are respected and recognized as a source of strength. However, this must be a team effort so I expect you to join me in fostering such an environment. This class will represent a diversity of individual backgrounds and experiences, and every member is expected to show respect for every other member so that everyone can learn in this space. If you experience or witness any behavior that opposes this idea, it would be helpful for me to know so that I can address it, but I do recognize that this is additional work and may be difficult. If you are comfortable reporting such incidents, there are a few ways you can do so: Email / Slack / Talk to me Report it to our anonymous CS departmental climate feedback form Fill out a Bias Incident Report which goes to the Middlebury Community Bias Response Team You belong in this class and in the computer science department. Thank you for being here and for contributing to this course. Discussions should be Respectful We will be using slack for the majority of course communication, as well as discussion of homework and reading questions. It is often difficult to convey tone -- especially with sarcasm or jokes -- in writing. We should all strive to be clear, welcoming, and respectful of others at all times. Everyone is coming to this course with different backgrounds, and there is definitely no such thing as a \"silly\" question. If you are sharing your knowledge with others, or seeking their knowledge you must do so respectfully. Pronouns and Identity I will use your preferred gender pronouns and name, and I expect you to use the names and pronouns your classmates prefer. (I understand that some students may be in the process of exploring their gender identity, may not feel comfortable sharing a gender pronoun, or may not go by gender pronouns; you can let me know if you do not want to share a gender pronoun.) You will notice that I have my pronouns listed in my slack display & full names. I encourage you to do the same if you feel comfortable. If you are communicating about another student and do not know their pronouns, go ahead and use their whole name to refer to them e.g., -- \"I agree with @johnf.\". You will notice that I also use they/them when referring to a hypothetical student. Preliminary Schedule This is quite a strange semester and time in the world -- this schedule represents my best guess about the future -- something will have to change. Check the online version on Canvas? for the latest. Note especially the dates for the online midterm -- you'll want to make sure you have at least 2 hours of focus on the weekend of 23-25 of October. Contact me ASAP if there is an issue that weekend. Week Start Discussion Topics Readings Projects Topics 0 8 Sept What is CS? Languages Ch1: Languages P0: Slack, Thonny 1 14 Sept Variables, Strings, Functions Ch2: Variables ; Ch3: Functions & Modules P1: Variables & Arithmetic 2 21 Sept Conditionals & Recursion Ch5: Conditionals & Recursion P2: Decisions/Recursion 3 28 Sept Recursion & Loops Ch6: Return Values ; Ch7: Iteration P3: Recursion/Loops 4 5 Oct Strings, Lists & Loops Ch8: Strings ; Ch10: Lists and Loops P4: Loops 5 12 Oct Dictionaries, & Tuples Ch11: Dictionaries ; Sets; Ch12: Tuples P5: Data Structures 6 19 Oct Midterm Review Practice Midterm Electronic-Midterm - 23-25 Oct Electronic-Midterm: Fri/Sat/Sun Cumulative - 7 26 Oct Files & Data: Images, Sounds Ch9: Files \"WordPlay\" ; Files & Data P6: Files 8 2 Nov Logic & Circuits Logic, Circuits, Architecture P7: Logisim 9 9 Nov Assembly Language; Objects Assembly; Ch15: Classes and Objects P8: hmmm 10 16 Nov More OOP Ch16: Classes and Functions , Ch17: Classes and Methods Final Project Begins - 25 Nov Thanksgiving; Go Home - ... 11 30 Nov Complexity TBD Finish Final Project Finals 7 Dec Final Exam","title":"Syllabus"},{"location":"syllabus.html#syllabus","text":"An online, always up-to-date version of this syllabus can be found online . Instructor: Prof. John Foley ( johnf@middlebury.edu ) Course Website: go/cs145 Slack Workspace midd-cs145-fall2020.slack.com Lectures: 100% asynchronous and remote Discussions / Lab Sections W - Thursday - 10-10:50am X - Thursday - 2-2:50pm Y - Thursday - 3:15-4:05pm Z - Friday - 10:20-11:10am Office Hours Office Hours or \"Student Hours\" are times when I am available for you to discuss aspects of the course, Computer Science, Middlebury, your plans, your questions about college in general, or really anything else I might be able to help with. Always by appointment: Schedule a 15, 20 or 30-minute meeting with me . Calendly is a service that lets you drop a meeting on my calendar whenever I'm free. I will guarantee I can make anything with 24 hours notice, but I will try my best with anything sooner. Message me in Slack and we can find a time to chat if those normal business hours don't work for you.","title":"Syllabus"},{"location":"syllabus.html#course-description","text":"In this course we will provide a broad introductory overview of the discipline of computer science, with no prerequisites or assumed prior knowledge of computers or programming. A significant component of the course is an introduction to algorithmic concepts and to programming using Python; programming assignments will explore algorithmic strategies such as selection, iteration, divide-and-conquer, and recursion, as well as introducing the Python programming language. Additional topics will include: the structure and organization of computers, the Internet and World Wide Web, abstraction as a means of managing complexity, social and ethical computing issues, and the question \"What is computation?\" (Juniors and Seniors by waiver) (formerly CSCI 0101) 3 hr. lect./1 hr. lab CSCI 0145 Middlebury Course Catalog","title":"Course Description"},{"location":"syllabus.html#course-modalities","text":"Lectures will be delivered asynchronously (with homework or \"reading quizzes\" replacing traditional labs). Labs will be run remotely, but synchronously with a focus on discussing the homework and supporting the weekly programming assignments (\"projects\").","title":"Course Modalities"},{"location":"syllabus.html#waiver-policy","text":"Juniors and Seniors are by waiver in this course in order to prioritize those using it as a gateway to the Major. Anyone with interest will be allowed to take the course, limited only by not wanting to overwhelm the course staff (ASIs, TAs, etc.).","title":"Waiver Policy"},{"location":"syllabus.html#tatutoring-sessions","text":"Information about the tutors can be found at go/cstutors . Temporary : There is usually tutoring every day from Sunday-Thursday, i.e., every night except Fridays and Saturdays. Tutors are your near-peers: Middlebury students who have completed this course in the past and are available for you to talk through ideas, problems, and technology.","title":"TA/Tutoring Sessions"},{"location":"syllabus.html#course-topics","text":"This is an introductory computer science class and no prior experience is expected or required . It is one of a few different entry points (CS105, CS150) into the CS major. We will do a lot of programming, and you will learn and practice a fair amount of Python, but this is an introduction to computer science, not a \"Python\" class. There is a lot of Python that we will not cover. Topics that we will cover include: Abstraction, algorithms, and program design Basic Python programming: variables, conditionals, loops, functions, and classes Fundamental programming paradigms: functional, imperative, object-oriented Data representation and storage Computer architecture Program complexity","title":"Course Topics"},{"location":"syllabus.html#course-content","text":"The primary mode of content delivery will be through readings and the homework, which is designed to highlight and encourage discussion over particular aspects of the readings.","title":"Course Content"},{"location":"syllabus.html#textbook-think-python-2e","text":"We will be reading primarily from the free \"Think Python\" Textbook which is available both as an Online Web Page and as a downloadable PDF . I have a paper copy, but you do not need to purchase a copy unless you prefer to read a physical book.","title":"Textbook: Think Python (2e)"},{"location":"syllabus.html#inclusivity-in-think-python","text":"While the content and ordering of this textbook are both great, the examples leave much to be desired -- nearly every single example is drawn from the comedy routines of the British surrealist comedians \" Monty Python \" ... To someone who's never seen any of their material (like me, the instructor!) that means their examples are often filled with gibberish that I don't find particularly helpful or funny.","title":"Inclusivity in Think Python"},{"location":"syllabus.html#online-resources","text":"There are probably hundreds of introductory Computer Science and Python courses available online (free or paid) and so at various points we have the opportunity to supplement our knowledge with online resources. If I find resources I find particularly helpful, I will be sharing them on Slack. Please do the same, if you find resources that answer your own questions.","title":"Online Resources"},{"location":"syllabus.html#course-videos","text":"Given the textbook and a variety of online materials that are available, the primary content I will be creating for this course will videos demonstrating hands-on use of our software \"Thonny\" as well as material to summarize and guide discussion, like our homework \"quizzes\".","title":"Course-Videos"},{"location":"syllabus.html#course-equipment-software","text":"Since this course will be run virtually we will need to use software in addition to the course-specific software we would ordinarily setup and use.","title":"Course Equipment &amp; Software"},{"location":"syllabus.html#computer-laptop-access","text":"If you have any questions about computer access, please don't hesitate to contact me ASAP - johnf@middlebury.edu - there are options through both the College and Department. Some more details are below, but I'm happy to help you navigate these systems. If you ever find yourself temporarily in need of a laptop, the Computer Science department has 10 rotating Dell laptops available to our students. These come pre-installed with software for most of the courses in the major. They are available to be loaned out short-term or long-term. Please get in touch ahead of time if you think you might need one. Due to COVID-19, short-term loans may be trickier than usual. On Long-Term Use: College policy has changed recently to include the expectation for every student to have a laptop available. The college provides laptops to those who need them where \u201cneed\u201d is based on Student Financial Services calculations. If you anticipate needing a laptop for the whole term, we encourage you to inquire with Student Financial Services and the library first due to our smaller pool of equipment. However, our department commits to meeting the needs of every student, so do not be afraid to reach out if you believe you need one of our laptops for any length of time. From Robert Lichenstein (rlichenstein@), lightly edited.","title":"Computer / Laptop Access"},{"location":"syllabus.html#zoom-emphasizing-synchronous-audio","text":"Our synchronous lab times will be conducted over Zoom, where we will occasionally use breakout rooms or share screens but we will focus on getting started with and having real-time discussions about the new projects each week. It is likely Zoom will be required for many of your other courses. Look for the Zoom link for your lab in your lab-channel on Slack!","title":"Zoom (emphasizing synchronous audio)"},{"location":"syllabus.html#slack","text":"Slack is an online, real-time chat service used by a lot of businesses and other organizations. We will be using our free slack workspace to: Provide a space for asking questions that is less formal than email and doesn't require a good Zoom connection. Provide a long-lasting chat space, since Zoom chat disappears at the end of a call. Provide the opportunity for students to have one-on-one or small group conversations given the course exists in virtual space this Fall. I will be manually inviting students who are enrolled in the course to the Slack workspace in September.","title":"Slack"},{"location":"syllabus.html#python-via-thonny","text":"We will install Thonny - a program to help us learn to write Python in the first week and use it throughout the course. There are installers for Mac, Windows, & Linux. If you have any trouble getting this installed, reach out in Slack or in Tutoring hours.","title":"Python via Thonny"},{"location":"syllabus.html#online-python-access","text":"If you have a Chromebook or cannot install Thonny (please consult with the instructor if this is the case), you will also be able to access Python through a website like repl.it . This kind of access to Python will be far less convenient than having it on your personal computer but may be the best choice.","title":"Online Python Access"},{"location":"syllabus.html#logisim","text":"Later in the course, we will explore how computers are constructed out of electrical logic gates and transistors. Logisim is software that will allow us to \"build circuits\" on our computers and test them. We will learn to install & use this software together, later in the course.","title":"Logisim"},{"location":"syllabus.html#course-structure","text":"CS145 has no officially scheduled lecture session, but you will have been enrolled in a lab section: W, X, Y, or Z. You are expected to attend our synchronous \"lab\" times each week. We will cover a lot of material asynchronously through the week (expect materials to be posted by Monday morning).","title":"Course Structure"},{"location":"syllabus.html#weekly-project-dates","text":"In order to simplify our management of the course, the goal is for us to have consistent days each week to expect new material and projects.","title":"Weekly Project Dates"},{"location":"syllabus.html#mondays-readings-homework","text":"Video Content & Weekly Homework \"Quiz\" will be made available so you can begin reading, discussing, and trying examples whenever you start every Monday.","title":"Mondays: Readings &amp; Homework"},{"location":"syllabus.html#wednesdays-projects-due-available","text":"The project for the week will be released by Wednesday -- if you feel comfortable with the readings for the week you may begin early. The project for the previous week will be due Wednesday at Midnight.","title":"Wednesdays: Projects Due &amp; Available"},{"location":"syllabus.html#thursdaysfridays-lab-session","text":"Lab sessions are scheduled on Thursdays & Fridays. It is important that you come to the beginning of the lab section even if you feel you have managed to complete the weekly project and readings independently.","title":"Thursdays/Fridays: Lab Session"},{"location":"syllabus.html#deadline-conflicts","text":"While projects are formally due every Wednesday, if you have recurring family or work responsibilities on Wednesdays, please let the instructor know as soon as possible, and we can work out a more feasible deadline for your situation. The value in a schedule is not usually the exact hard deadlines but rather in ensuring that our learning proceeds together, at a reasonable pace. The other importance of deadlines is ensuring that the graders and myself can get you timely and helpful feedback!","title":"Deadline Conflicts"},{"location":"syllabus.html#grading-information","text":"The following grading structure is meant to emphasize the importance of weekly readings, homework, and projects while also including the midterm and final exams. Midterm and Final exams will likely include questions and ideas drawn directly from the homework and projects. Section Weighting Readings & Homework 20% Projects 40% Midterm 20% Final 20% Because homework may be perfected and resubmitted through our lab sections, it may be fair to characterize \"Readings & Homeworks\" as discussion or participation.","title":"Grading Information"},{"location":"syllabus.html#academic-honesty-at-middlebury","text":"As an academic community devoted to the life of the mind, Middlebury requires of every student complete intellectual honesty in the preparation and submission of all academic work. Details of our Academic Honesty, Honor Code, and Related Disciplinary Policies are available in Middlebury\u2019s handbook. Middlebury College Syllabus Template retrieved 18 August 2020.","title":"Academic Honesty at Middlebury"},{"location":"syllabus.html#academic-honesty-cs","text":"Work in computer science may often feel like a strange mix of art, language, mathematics, and logic. What sets this course apart from some of these other domains is the ability to instantaneously consult a \"gold standard\" for most of your work. Does your python program work? A lot of the time, you can run it immediately, and find out. When we go to assess homework and projects, often we can only tell whether or not it works -- we can't tell if you understand it. Do you understand your work? Especially in introductory CS courses, where the solutions are usually not that long, you can often land on a solution by making a small change, and not fully understand why it works now and it didn't before. You must take charge of your personal learning. Do not settle for \"it works\" if you do not understand why -- ask a question! When you get the opportunity to discuss your work with other students, ensure that everyone leaves the group discussion with the same level of understanding. A working solution you do not understand has no value to your learning. Because the solutions to our projects (in this course) are short, and there are limited intro-style problems to choose from, it is likely you will be able to find partial or full solutions to problems using online resources such as google or stack-overflow. A working solution you do not understand has no value to your learning.","title":"Academic Honesty &amp; CS"},{"location":"syllabus.html#universal-access-accommodations","text":"The Disability Resource Center (DRC) at Middlebury provides for student accommodation in courses. The DRC provides support for students with disabilities and facilitates the accommodations process by helping students understand the resources and options available and by helping faculty understand how to increase access and full participation in courses. The DRC can also provide referrals for students who would like to undergo diagnostic testing. Students who are on financial aid and have never undergone diagnostic testing can apply to the CTLR for support to cover the cost of off-campus testing. DRC services are free to all students. If you have any accommodations through this office, please notify the instructor as soon as possible at the start of the semester so that your accommodation can be supported as quickly as possible. I try to create course materials with \"Universal Design\" in mind: that is, I try to make it so that all materials can be accomplished fairly by all students: for example, I schedule double the expected time by default on all exams. If there is any change that can be made to the course materials that would improve your learning, don't hesitate to ask or suggest such changes.","title":"Universal Access &amp; Accommodations"},{"location":"syllabus.html#student-expectations-learning-strategy","text":"I will often be comparing this course to a foreign language course. Learning about computers via a computer language like Python is quite similar to learning a second or third language; if you do not read, write, and speak the language, it will be difficult to make sense of concepts or to get the ideas to stick in your head. To guide and demonstrate good learning practice, each of our readings will be accompanied by a handful of (mostly) multiple choice questions. These questions will be more difficult than those designed for exams, because the goal of them is to drive experimentation and discussion, rather than to check knowledge. I will freely discuss the correct answers to these questions in our synchronous labs, after which you will have the opportunity to update your answers. I imagine that a successful strategy to learn from the homework & readings will be to: Read the chapters and take some notes. Attempt the \"homework quizzes\". Try to assess your knowledge/notes: keep the book \"closed\". Guess on questions that ask \"What does this code do?\" Use your experience of homework to guide your learning: Re-read any sections on which you do not feel you know the correct answers. Type in and run any code from the homework to verify whether your guesses are correct. Review the homework again, updating your answers based on your closer reading. Ask questions and share knowledge on Slack. I will be fairly quiet here (focusing on clarifications, and giving thumbs-up to good discussions). Ask questions synchronously in lab. \"Perfect\" your homework answers & notes after lab. When projects become available on Wednesdays, you'll want to be wrapping up your knowledge from the readings so that you will be ready to work on the new assignment in the second half of lab.","title":"Student Expectations / Learning Strategy"},{"location":"syllabus.html#inclusivity-discussions","text":"It is important to me to create an inclusive learning environment where diversity and individual differences are respected and recognized as a source of strength. However, this must be a team effort so I expect you to join me in fostering such an environment. This class will represent a diversity of individual backgrounds and experiences, and every member is expected to show respect for every other member so that everyone can learn in this space. If you experience or witness any behavior that opposes this idea, it would be helpful for me to know so that I can address it, but I do recognize that this is additional work and may be difficult. If you are comfortable reporting such incidents, there are a few ways you can do so: Email / Slack / Talk to me Report it to our anonymous CS departmental climate feedback form Fill out a Bias Incident Report which goes to the Middlebury Community Bias Response Team You belong in this class and in the computer science department. Thank you for being here and for contributing to this course.","title":"Inclusivity &amp; Discussions"},{"location":"syllabus.html#discussions-should-be-respectful","text":"We will be using slack for the majority of course communication, as well as discussion of homework and reading questions. It is often difficult to convey tone -- especially with sarcasm or jokes -- in writing. We should all strive to be clear, welcoming, and respectful of others at all times. Everyone is coming to this course with different backgrounds, and there is definitely no such thing as a \"silly\" question. If you are sharing your knowledge with others, or seeking their knowledge you must do so respectfully.","title":"Discussions should be Respectful"},{"location":"syllabus.html#pronouns-and-identity","text":"I will use your preferred gender pronouns and name, and I expect you to use the names and pronouns your classmates prefer. (I understand that some students may be in the process of exploring their gender identity, may not feel comfortable sharing a gender pronoun, or may not go by gender pronouns; you can let me know if you do not want to share a gender pronoun.) You will notice that I have my pronouns listed in my slack display & full names. I encourage you to do the same if you feel comfortable. If you are communicating about another student and do not know their pronouns, go ahead and use their whole name to refer to them e.g., -- \"I agree with @johnf.\". You will notice that I also use they/them when referring to a hypothetical student.","title":"Pronouns and Identity"},{"location":"syllabus.html#preliminary-schedule","text":"This is quite a strange semester and time in the world -- this schedule represents my best guess about the future -- something will have to change. Check the online version on Canvas? for the latest. Note especially the dates for the online midterm -- you'll want to make sure you have at least 2 hours of focus on the weekend of 23-25 of October. Contact me ASAP if there is an issue that weekend. Week Start Discussion Topics Readings Projects Topics 0 8 Sept What is CS? Languages Ch1: Languages P0: Slack, Thonny 1 14 Sept Variables, Strings, Functions Ch2: Variables ; Ch3: Functions & Modules P1: Variables & Arithmetic 2 21 Sept Conditionals & Recursion Ch5: Conditionals & Recursion P2: Decisions/Recursion 3 28 Sept Recursion & Loops Ch6: Return Values ; Ch7: Iteration P3: Recursion/Loops 4 5 Oct Strings, Lists & Loops Ch8: Strings ; Ch10: Lists and Loops P4: Loops 5 12 Oct Dictionaries, & Tuples Ch11: Dictionaries ; Sets; Ch12: Tuples P5: Data Structures 6 19 Oct Midterm Review Practice Midterm Electronic-Midterm - 23-25 Oct Electronic-Midterm: Fri/Sat/Sun Cumulative - 7 26 Oct Files & Data: Images, Sounds Ch9: Files \"WordPlay\" ; Files & Data P6: Files 8 2 Nov Logic & Circuits Logic, Circuits, Architecture P7: Logisim 9 9 Nov Assembly Language; Objects Assembly; Ch15: Classes and Objects P8: hmmm 10 16 Nov More OOP Ch16: Classes and Functions , Ch17: Classes and Methods Final Project Begins - 25 Nov Thanksgiving; Go Home - ... 11 30 Nov Complexity TBD Finish Final Project Finals 7 Dec Final Exam","title":"Preliminary Schedule"}]}